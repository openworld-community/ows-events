name: Build docker images and push to GHCR

on:
  workflow_dispatch:
  push:
    branches:
      - prod

concurrency: build-and-deploy

permissions:
  contents: read
  packages: write

env:
  env_var: ${{ vars.ENV_CONTEXT_VAR }}
  REGISTRY: ghcr.io
  TAG_NAME: prod
  FRONTEND_CACHE_IMAGE_NAME: frontend_buildcache
  BACKEND_CACHE_IMAGE_NAME: backend_buildcache

jobs:
  build-and-push:
    name: Build prod image and push it to registry
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Export lowercase image names
        shell: bash
        run: |
          : "${{ env.REGISTRY }}/${{ github.repository }}_frontend:prod"
          echo "FRONTEND_IMAGE_TAG=${_,,}" | tee -a $GITHUB_ENV
          : "${{ env.REGISTRY }}/${{ github.repository }}_backend:prod"
          echo "BACKEND_IMAGE_TAG=${_,,}" | tee -a $GITHUB_ENV
          : "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.FRONTEND_CACHE_IMAGE_NAME }}:prod"
          echo "FRONTEND_CACHE_IMAGE_TAG=${_,,}" | tee -a $GITHUB_ENV
          : "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BACKEND_CACHE_IMAGE_NAME }}:prod"
          echo "BACKEND_CACHE_IMAGE_TAG=${_,,}" | tee -a $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push frontend docker image
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./frontend/Dockerfile
          tags: "${{ env.FRONTEND_IMAGE_TAG }}"
          push: true
          cache-from: type=registry,ref=${{ env.FRONTEND_CACHE_IMAGE_TAG }}
          cache-to: type=registry,ref=${{ env.FRONTEND_CACHE_IMAGE_TAG }},mode=max

      - name: Build and push backend docker image
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./backend/Dockerfile
          tags: "${{ env.BACKEND_IMAGE_TAG }}"
          push: true
          cache-from: type=registry,ref=${{ env.BACKEND_CACHE_IMAGE_TAG }}
          cache-to: type=registry,ref=${{ env.BACKEND_CACHE_IMAGE_TAG }},mode=max

  deploy-prod:
    name: Connect to server, pull latest prod images and deploy it
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: install ssh keys
        # check this thread to understand why its needed:
        # https://stackoverflow.com/a/70447517
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ vars.PROD_DIR }} && git checkout ${{ vars.PROD_BRANCH }} && git pull"
      - name: connect and update traefik
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "export TRAEFIK_ADMIN_USER=${{ secrets.TRAEFIK_ADMIN_USER }} && export TRAEFIK_ADMIN_HASHED_PASSWORD='${{ secrets.TRAEFIK_ADMIN_HASHED_PASSWORD }}' && cd ${{ vars.PROD_DIR }} && docker compose --compatibility -p ows-events -f docker-compose.traefik.yml up -d --build && exit"
      - name: connect and  services
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin && export S3_ENDPOINT=${{ secrets.S3_ENDPOINT }} && export S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_KEY }} && export S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY }} && export S3_BUCKET=${{ secrets.S3_BUCKET }} && export S3_REGION=${{ secrets.S3_REGION }} && export NUXT_PUBLIC_GOOGLE_SIGN_IN_CLIENT_ID=${{ secrets.PROD_GOOGLE_OAUTH_KEY }} && export PEREDELANOCONF_GOOGLEDOC=${{ secrets.PEREDELANOCONF_GOOGLEDOC_ID }} && export NUXT_PUBLIC_GTAG_ID=${{ secrets.PROD_GTAG_ID }} && export GITHUB_PARSING_TOKEN=${{ secrets.PARSING_TOKEN }} && export SECRET_KEY=${{ secrets.BACKEND_SECRET_KEY }} && export NUXT_PUBLIC_TELEGRAM_AUTH_BOT_NAME=${{ vars.PROD_AUTH_TELEGRAM_BOT_NAME }} && cd ${{ vars.PROD_DIR }} && docker compose --compatibility -p ows-events_prod -f docker-compose.prod.new.yml up --pull always -d --force-recreate && exit"
      - name: cleanup
        run: rm -rf ~/.ssh
        
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Fetch last merged PR info
        id: lastpr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_JSON=$(gh pr list --base prod --state merged --limit 1 --json title,author,url,headRefName,baseRefName --jq '.[0]')
          echo "TITLE=$(echo "$PR_JSON" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "AUTHOR=$(echo "$PR_JSON" | jq -r '.author.login')" >> $GITHUB_OUTPUT
          echo "URL=$(echo "$PR_JSON" | jq -r '.url')" >> $GITHUB_OUTPUT
          echo "FROM=$(echo "$PR_JSON" | jq -r '.headRefName')" >> $GITHUB_OUTPUT
          echo "TO=$(echo "$PR_JSON" | jq -r '.baseRefName')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Notify Telegram on Success
        if: success()
        uses: toprogramm/telegram-notifier@v1.0.4
        with:
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          thread_id: ${{ secrets.TELEGRAM_THREAD_ID }}
          message: |
            ✅ Успешный деплой на PROD-окружение!
            ✏️ Что обновлено: ${{ steps.lastpr.outputs.TITLE }}
            ✍️ Автор PR: ${{ steps.lastpr.outputs.AUTHOR }}
            🔀 Из ветки: ${{ steps.lastpr.outputs.FROM }} -> ${{ steps.lastpr.outputs.TO }}
            🔗 Ссылка: ${{ steps.lastpr.outputs.URL }}
            🚀 Коммит: ${{ github.sha }}
            🙋 Смержил: ${{ github.actor }}

      - name: Notify Telegram on Failure
        if: failure()
        uses: toprogramm/telegram-notifier@latest
        with:
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          thread_id: ${{ secrets.TELEGRAM_THREAD_ID }}
          message: |
            ❌ Ошибка при деплое на PROD-окружение!
            📦 Workflow: ${{ github.workflow }}
            🙋 Смержил: ${{ github.actor }}
            🔧 Коммит: ${{ github.sha }}
